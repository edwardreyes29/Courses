I. Layout overview

    Grid: First thing to master!
        12-Column Grid Breakpoints:
            * Extra small (< 576px) fluid up till 540px
            * small (>= 576px) fluid up till 540px
            * medium (>= 768px) fluid up till 720px (taking entire width of container)
            * large (>= 992px) fluid up till 960px
            * Extra Large (>=1200px) fluid up till 1140px

            * .container-fluid is 100% fluid no matter what

        1. Containers
            1. Rows & columns

II. Using containers 
    Grid:
        * Responsive 12-column 
        * Flexbox Based 
        * Classes: container, row, column

    Grid Containers 
        * container(-SIZ) 
            SIZ: sm md lg xl fluid 
            

        * adds 15px padding to each side of the container
            When add rows and columns, those paddings will be taken away.


III. Working with rows and columns 

    Rows:
        * row
        * row-cols(-BP)(-COL)
            BP: sm >576px | md >768px | lg >992px | xl >1200px 
            COL: 1-6
        * no-gutters: delete space between
    Columns:
        * Up to 12 columns
        * col(-BP)(-COL)
            BP: sm >576px | md >768px | lg >992px | xl >1200px 
            COL: 1-12

    Aligning Columns:
        * Vertical
            align-TYP-DIR
            TYP: items | self
            DIR: start(top) | center | end(bottom)
        * Horizontal
            justify-content-DIR 
            DIR: start | center | end | around | between

    Ex. Set max two columns
        <div class="row row-cols-2">
    Ex. Set minimum 2 columns up to 4 columns max   
        <div class="row row-cols-2 row-cols-lg-4">
    Ex. remove 30px space
        <div class="row row-cols-2 row-cols-lg-4 no-gutters">

    Ex. Let column take up minimum 3 units and max 6 units
     <section class="col-3 col-lg-6">
        <img class="img-fluid" src="images/image.png" alt="sample image">
        <h4>Nutrition</h4>
        <p>Let our nutrition experts review your pet's diet and prescribe a custom nutrition plan for optimum health and
          disease prevention.</p>
      </section>

    Ex. Center columns horizontally
        <div class="row justify-content-center">

    Ex. Center columns vertically
        <div class="row vh-100 align-items-center justify-content-center"> // increase view height

    Ex. Have column align itself to the bottom of it's container
        <section class="col-3 align-self-end">
            


IV. Multiple column classes

    Multiple Rows & cols

    * container(-SIZ) 
        SIZ: sm | md | lg | xl | fluid 

    * row row-cols(-BP)(-COL) 
        BP: sm >576px | md >768px | lg >992px | xl >1200px 
        COL: 1-6

    * col(-BP)(-COL) 
        BP: sm >576px | md >768px | lg >992px | xl >1200px 
        COL: 1-12

    container-fluid will adjust to screen size of the device and will always go to the edge of the screen
    container-lg: will be responsive until it reaches 992px and will snap into lg breakpoints
    row-cols-2: each row will have 2 elements

    Row breakpoint
        class="row row-cols-sm-2" while screen is >576px, set rows to 2, any smaller will reset the 
        breakpoint.

        <div class="row row-cols-1 row-cols-sm-2"> 
            - At anything smaller than the sm breakpoint, set each row to have 1 element

         <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3">
            - rows will have 3 when hitting md breakpoint, rows will have 2 smaller than the md breakpoint,
            and 1 smaller than the sm breakpoint

    Col breakpoint (each row has 12 columns slots, and some columns can take up more than others)
        <section class="col-6"> take up 6/12 spots
            If row columns take up more than 12 slots, they will take up space in the next row.

        <section class="col-sm-6 col-md-4 col-lg-3 col-xl-2">
            columns will take 6/12 column space at small breakpoint
            columns will take 4/12 column space at medium breakpoint
            columns will take 3/12 column space at large breakpoint
            columns will take 2/12 column space at extra large breakpoint

        * Using multiple rows makes more sense and easier.

V. Offset columns 

    Column Offsets
    * offset-BP-COL
        BP: sm >576px | md >768px | lg >992px | xl >1200px
        COL: 1-11

    <section class="col-sm-4 offset-sm-1">
        Adds 1 column to the left, offset row by 1 column and shift the rest of
        the columns to the right.

        * used to be used for centering, but now there are alignment tools like flexbox.
        * not very useful.

VI. Nested columns 
    To nest a column, create a new row withing an existing column

    Nesting:
        * row inside column
        * Creates 12-col grid
        * Use same classes

    <section class="col-sm-8"><!-- Takes up 8/12 columns in grid-->
      <img src="images/image.png" alt="sample image">
      <h4>Exotic Pets</h4>
      <p>We offer <strong>specialized</strong> care for <em>reptiles, rodents, birds,</em> and other exotic pets.</p>
    </section>
    <section class="col-sm-4"><!-- Takes up 4/12 columns (remainin) in grid-->
      <div class="row">
        <div class="col-sm-4"><!-- This creates a new grid not affected by outside column -->
          <img src="images/image.png" alt="smaple image">
        </div>
        <div class="col-sm-4"><!-- This creates a new grid not affected by outside column -->
          <img src="images/image.png" alt="smaple image">
        </div>
        <div class="col-sm-4"><!-- This creates a new grid not affected by outside column -->
          <img src="images/image.png" alt="smaple image">
        </div>
      </div><!-- row -->
    </section><!-- section -->

    by default columns have a 15px gutter inbetween, take care of that by using no-gutters (specify in row class)

    <div class="col-2 col-sm-4">
        usual 2 columns, but after sm break point, columns will take up 4/12 grid space


VII. Custom order 
    Order:
        * order(-BP) -ORD 
            BP: sm >576px | md >768px | lg >992px | xl >1200px 
            ORD: 1-12 

    <section class="col order-3">
        - shifts this column to the third position, so if its the first, it goes..you get it.

        sometimes it won't work unless you specify order for each column.
        Always specify order.

    <section class="col order-2 d-flex"> 
        - d-flex assumes you want to put things together, so text within same container as an image might appear on it's side
        - add flex-column so both elements will appear one on top of the other.
        <section class="col order-2 d-flex flex-column">
            - (!) Now elements within this can now have their orders changed 

    (!!) Might be useful for projects page.
        <section class="col order-2 d-flex flex-column">
        <img class="order-2" src="images/image.png" alt="sample image">
        <h4 class="order-3">1. Exotic Pets</h4>
        <p class="order-4">We offer <strong>specialized</strong> care for <em>reptiles, rodents, birds,</em> and other exotic pets.</p>
      </section>


VIII. Grid alignment options 
    Vertical Alignment:
        * Use in rows
        * align-items-ALN 
            ALN: start | center | end

    Individual Alignment:
        * Use in cols 
        * align-self-ALN
            ALN: start | center | end
    
    Horizontal Alignment:
        * Use in rows 
        * Need col width 
        * justify-content-ALN
            ALN: start | center | end | around | between 

        align-items-center doesn't align items on the top, would need to nesting items

        <div class="row align-items-center">
            <div class="col">
                <div class="row">
                    <div class="col">
                    </div>
                    <div class="col">
                    </div>
                    <div class="col">
                    </div>
                </div>
            </div>
        <div>

        From the instructors explanation, it's taking the biggest item and its controlling centering in relationship to the tallest one.


        Boostrap has flexbox capabilities, learn to use bootstrap layouts.
        
IX. Display properties 

    Position: Works exactly like CSS position property.
    Position:
        * Position classes  
            fixed-top | fixed-bottom | sticky-top

        iffy with support

    Basic Display
        * Mimics CSS
        *d(-BP)-TYP 
            BP: sm >576px | md >768px | lg >992px | xl > 1200px 
            TYP: none | inline | inline-block | block 
                 table | table-row | table-cell | flex | inline-flex

    Print Display (Like for the acutal printer -> paper) 
        * d-print-TYP
            TYP: none | inline | inline-block | block 
                 table | table-row | table-cell | flex | inline-flex
            d-print-none -> won't allow to print on paper.
            d-none d-print-block -> only shows up when sending this element to printer.

    Basic Flex Container:
        * d(-BP)(-inline)-flex 
            BP: sm >576px | md >768px | lg >992px | xl >1200px 
        
            by default block, (-inline) is optional


    (!) fixed-bottom takes element out of the container and sticks it to the bottom (handy for things like notifications)
    

      <div class="bg-info fixed-bottom">
        <div class="item">Exotic Pets</div>
        <div class="item">Grooming</div>
        <div class="item">Health</div>
      </div>

X. Flexbox container options 
    
    Flex Container  
    * Container/item classes
    * d(-BP)(-inline)-flex
        BP: sm >576px | md >768px | lg >992px | xl > 1200px 

    Direction classes 
    * flex(-BP)(-DIR)(-reverse)
        BP: sm >576px | md >768px | lg >992px | xl > 1200px 
        DIR: row | column 

    Order (BP->breakpoint)
    * order(-BP)-ORD 
        BP: sm >576px | md >768px | lg >992px | xl > 1200px 
        ORD: 1-12

    Justify -> justify space between items 
    *justify-content(-BP)-ALG)
        BP: sm >576px | md >768px | lg >992px | xl > 1200px
        ALG: start | end | center (horizontally) | around | between

    Wrap -> Let you control whether elements wrap in relation to the space in their container.
    * flex(-BP)-WRP(-reverse)
        BP: sm >576px | md >768px | lg >992px | xl > 1200px
        WRP: wrap | nowrap 

    Vertical Alignment
    * align-content(-BP)-ALG 
        BP: sm >576px | md >768px | lg >992px | xl > 1200px
        ALG: start | end | center | between | around | stretch (will make elements fit in containers vertically row)


    <div class="bg-info d-flex flex-sm-column" style="height:100vh">
    - flex remains a row until it reaches sm breakpoint and converts it to a column


XI. Individual flex elements
    Align Self class:
    * align-self(-BP)-ALG
        BP: sm >576px | md >768px | lg >992px | xl > 1200px
        ALG: start | end | center | baseline | stretch

    * Controlling order 
        * order(-BP)-ORD 
            BP: sm >576px | md >768px | lg >992px | xl > 1200px
            ORD: 1-12


    (!) align-self-stretch is the default, it will take full height of the container.


XII. Floating elements

    *float(-BP)-SID 
        BP: sm >576px | md >768px | lg >992px | xl > 1200px
        SID: left | right | none

        clearfix will let outer class not lose track of items
        

XIII. Margin and padding
    Margin/Padding 
        * pb(-BP)(-N)SIZ 
        PRO: m (margin) | p (padding) 
        SID: t | r | b | l | x | y
         BP: sm >576px | md >768px | lg >992px | xl > 1200px
         SIZ: 0 1(1 rem) 2(1 1/2 rems) 3(2 rems) 4(2 1/2 rems) 5(3 rems) auto

         pt -> padding top
         pb -> badding bottom 
         mt -> margin top
         mr -> margin right

         N -> n5 (negative value, only works or margins but not padding)

        py-5: padding of 3 rems for y


XIV. Visibility 
    * invisible (won't appear on screen but will still take space), 
      visible (only visible to screen readers)
    * Display Property: use d-none to remove from screen
        d(-BP)-TYP
            TYP: none | inline | inline-block | block 
                 table | table-cell | flex | inline-flex


XV. Sizing utilities 

    * SIZ(-AMT)
        SIZ: w h mw mh vw vh min-vw min-vh 
        AMT: 25 | 50 | 75 | 100 | auto

    w-100 -> make width 100% of container size
    w-25  -> 25% container size
    
    // Everyt other SIZ can only have AMT of 100
    vw-100 -> width of current devices only option is 100
    vh-100 -> only option is also 100

    mw & mh are max width and max height

XVI. Using borders

    * BORDER(-SID)(-COL)(-0)    
        SID: top | right | bottom | left
        COL: primary | secondary | success | danger | warning
             info | light | dark | white


    * Rounded
        SID: top | right | bottom | left 
        SHA: circle | pill
        SIZ: 0 sm lg

Quiz:

3. Best way to nest columns using Bootstrap?
    A: row inside existing column

4. Push will move columns to the _right_

5. FALSE: by default, flex elements are inline level elements

6. For maximum height -> mh-100
