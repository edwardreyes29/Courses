I. Let

    Allows variable name to appear only once.

II. Scopes

    When you declare a variable with the var keyword, it is declared globally, 
    or locally if declared inside a function.

III. Declare Read-Only Variable with const keyword

    Variables declared with 'const' keyword are read-only and cannot be reassigned a new value.
    const -> immutable

    uppercase -> immutable Variables
    lowercase or camelCase -> for mutable (objects and arrays.)

    'use strict';
    const FAV_PET = "Cats";

IV. Mutate an array declared with const 

    'use strict';
    const s = [5, 6, 7]; // you just can't assign a new array but you can still change it's values.
    s[2] = 45; // works just as it would with an array declared with var or let. 
    console.log(2); // returns [5, 6, 45]

V. Prevent Object Mutation

    (!) 'const' alone doesn't really protect your data from mutation. To ensure this, 
    JavaScript provides a function Object.freeze to prevent data mutation

    Ex. 
        let obj = {
            name: "FreeCodeCamp",
            review: "Awesome"
        };

        Object.freeze(obj);
        obj.review = "bad"; // will be ignored. Mutation not allowed
        obj.newProp = "Test"; // will be ignored. Mutation not allowed

    Ex. 
        function freezeObj() {
            'use strict';
            const MATH_CONSTANTS = {
            PI: 3.14
            };
            // Only change code below this line
            Object.freeze(MATH_CONSTANTS);

            // Only change code above this line
            try {
                MATH_CONSTANTS.PI = 99;
            } catch(ex) {
                console.log(ex);
            }
            return MATH_CONSTANTS.PI;
        }
        const PI = freezeObj();

VI. Arrow Functions to Write Concise Anonymous Functions

    // inline functions 
    const myFunc = function() {
        const myVar = "value";
        return myVar;
    }

    // ES6 arrow function syntax for anonymous function
    const myFunc = () => {
        const myVar = "value";
        return myVar;
    }

    // When there is no function body and only a return value, you can ommit 'return' keyword
    const myFunc = () => "value";

    Ex. 
        var magic = function() {
            'use strict';
            return new Date();
        };
        console.log(magic());

        // Arrow function 
        const magic = () => new Date();
        console.log(magic());

VII. Arrow functions with Parameters

    // doubles input and returns it.
    const doubler = (item) => item * 2;

    // If an arrow function had a single argument, may omit parentheses.
    const double = item => item * 2;

    // Pass more than one arg, use parentheses.
    const multiplier = (item, multi) => item * multi;


VIII. Default Parameters for functions.

 const greeting = (name = "Anonymous") => "Hello " + name;

 console.log(greeting("John")); // Hello John
 console.log(greeting()); // Hello Anonymous 


IX. Rest Parameters w/ Function Parameters 

    * Rest parameter allows you to create functions that take
      a variable number of arguments.
    * These arguments are stored in an array that can be accessed 
      inside the function.
    
    function howMany(...args) {
        return "You have passed " + args.length + " arguments.";
    }
    console.log(howMany(0,1,2)); // 3 arguments
    console.log("string", null, [1, 2, 3], {})); // 4 arguments.


X. Spread Operator
      const arr = [6, 89, 3, 45];
      const maximus = Math.max(...arr); // Returns 89

      ...arr returns an unpacked array -> it spreads the array.
      (!) Only works in an argument to a function or in array literal.

      ES5:
      const maxiumus = Math.max.apply(null, arr); // also returns 89

      Ex. Copy contents of arr1 to arr2 
        const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];
        let arr2;

        arr2 = [...arr1];  // Change this line
        console.log(arr2);

XI. Destructuring Assignment to Extract Values from Objects.

    ES5:
        const user = { name: 'John Doe', age: 34 };

        const name = user.name;     // name = 'John Doe'
        const age = user.age;       // age = 34
        
    ES6: 
        const { name, age } = user; // name = 'John Doe', age = 34


    >>> Can assign new variable name by placing a colon and setting new name.

    const { name: userName, age: userAge } = user;
    // userName = 'John Doe', userAge = 34


    >>> Use destructuring assignment to assign variables from Nest Objects.
    const user = {
        johnDoe: {
            age: 34,
            email: 'johnDoe@freeCodeCamp.com'
        }
    };

    // extract values of the object properties.
    const {johnDoe: {age, email}} = user;
    OR 
    const {johnDoe: {age: userAge, email: userEmail}} = user;

    >>> Destructuring Assignment to Assigne Variables from Arrays 

    ...arr spread unpacks an array into a comma-separated list, but cannot 
    pick and choose which elements you want to assign.

    Destructuring lets us do just that:
        const[a, b] = [1,2,3,4,5,6]; // a -> first value, b -> second
        console.log(a, b); // 1, 2, 5
    
    Can also access value at any index using commas to reach desired index:

    const [a,b,,,c] = [1,2,3,4,5,6];
    console.log(a,b,c); // 1, 2, 5

    >>> Use Destructuring Assignment with the Rest Parameter to Reassign Array elements
    const[a, b, ...arr] = [1, 2, 3, 4, 5, 7];
    console.log(a, b); // 1, 2
    console.log(arr);  // [3, 4, 5, 7]

    ...arr is the rest parameter, and it only works correctly as the last variable in the list.

    >>> Use Destructuring Assignment to Pass an Object as a Function's Parameters
    const profileUpdate = (profileData) => {
        const { name, age, nationality, location } = profileData;
        // do something with these variables.
    }

    const profileUpdate = ({name, age, nationality, location } ) => {
        /* do something with these fields */
    }

XII. String Template Literals 

    `Show value of x: ${x}`

    Makes creating complex strings easier. Allows for multi-line strings.

    const greeting = `Hello, my name is ${person.name}!
    I am ${person.age} years old.`}

XIII. Concise Literal Declaration using Object Property shorthand.
    const getMousePosition = (x,y) => ({
        x: x,
        y: y
    });

    // Shorthand.
    const getMousePosition = (x,y) => ({ x, y });

    Ex. 
        const createPerson = (name, age, gender) => {
            "use strict";
            // Only change code below this line
            return {
                name, age, gender
            };
            // Only change code above this line
        };

XIV. Write Concise Declarative Functions with ES6

    // ES5
    const person = {
        name: "Taylor",
        sayHello: function() {
            return `Hello! My name is ${this.name}.`;
        }
    };

    // ES6 
    const person = {
        name: "Taylor",
        sayHello() {
            return `Hello! My name is ${this.name}.`;
        }
    };

XV. Class Syntax to Define a Constructor Function.

    'class' is only a keyword, and not like in Java or Python.


    // ES5, using new keyword to instantiate an object.
    var SpaceShuttle = function(targetPlanet) {
        this.targetPlanet = targetPlanet;
    }

    var zeus = new SpaceShuttle('Jupiter');

    // ES6 class syntax: in this case, the class keyword declares a new function, to which a constructor is added. 
    // constructor is invoked when 'new' is called to create a new object.

    class SpaceShuttle {
        constructor(targetPlanet) {
            this.targetPlanet = targetPlanet;
        }
    }

    const zeus = new SpaceShuttle('Jupiter');

    Notes:
        * UpperCamelCase should be used by convention for ES6 class names, as in SpaceShuttle used above.
        * The constructor method is a special method for creating and initializing an object created with 
            a class. You will learn more about it in the Object Oriented Programming section of the 
            JavaScript Algorithms And Data Structures Certification.

A. Using Getters and Setters to Control Access to an Object.

    You can obtain values from an object and set the value of a property within an object.

    These are classically called getters and setters.

    class Book {
        constructor(author) {
            this._author = author;
        }
        // getter 
        get writer() {
            return this._author;
        }
        // setters
        set writer(updateAuthor) {
            this._author = updatedAuthor;
        }
    }

    const lol = new Book('anonymous');
    console.log(lol.writer); // anonymous;
    lol.writer = 'wut';
    console.log(lol.writer); // wut

    Notice the syntax used to invoke the getter and setter. They do not even look like functions. 
    Getters and setters are important because they hide internal implementation details. 

    Note: It is convention to precede the name of a private variable with an underscore (_). 
    However, the practice itself does not make a variable private.

XVI. Create a Module Script 

JavaScript started with a small role to play on an otherwise mostly HTML web. Today, it’s huge, 
and some websites are built almost entirely with JavaScript. In order to make JavaScript more 
modular, clean, and maintainable; ES6 introduced a way to easily share code among JavaScript 
files. This involves exporting parts of a file for use in one or more other files, and importing 
the parts you need, where you need them. In order to take advantage of this functionality, you 
need to create a script in your HTML document with a type of module. Here’s an example:

    <script type="module" src="filename.js"></script>

A script that uses this module type can now use the import and export features   

A. Use export to Share a Code Block

    Imagine a file called math_functions.js that contains several functions related to mathematical operations. 
    One of them is stored in a variable, add, that takes in two numbers and returns their sum. You want to use 
    this function in several different JavaScript files. In order to share it with these other files, you first 
    need to export it.

        export const add = (x, y) => { 
            return x + y;
        }

        // Alternative
        const add = (x, y) => {
            return x + y;
        }


        export { add };

    When you export a variable or function, you can import it in another file and use it without having to rewrite the code. 
    You can export multiple things by repeating the first example for each thing you want to export, or by placing them all 
    in the export statement of the second example, like this:

    export { add, subtract };

B. Reuse JavaScript code using import.

    import allows you to choose which parts of a file or module to load. In the previous lesson, the examples exported add 
    from the math_functions.js file. Here's how you can import it to use in another file:

        import { add } from './math_function.js';

    ./ means in same folder as current file. relative path (./) and file extension (.js) are required.

    Import more than one item:
        import { add, subtract } from './math_functions.js';