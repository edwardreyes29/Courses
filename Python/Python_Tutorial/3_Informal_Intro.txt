A. Python as a Calculator

    ###
        >>> 17 // 3 # floor division discards fractional part
        5
        >>> 5 ** 2 # 5 squared
        24
        >>> width = 4 * 5
        >>> width
        20
    ###

    In interpreter, last printed expression is assign to _

    ###
        >>> tax = 12.5 / 100
        >>> price = 100.50
        >>> price * tax
        12.5625
        >>> price + _
        113.0625
        >>> round(_,2)
        113.06
        >>> 
    ###

    raw strings using 'r':
        >>> print('C:\some\name) # \n means newline!

        >>> print(r'C:\some\name') # r before quote 

    Multi-line:
        """...""" OR '''...'''
        print("""\
        Usage: thingy [OPTION]
            -h
            -H hostname
        """)
    
    >>> 'Py' 'thon'
    'Python'

    >>> text = ('Put several strings within parentheses '
    ...         'to have them joined together.')


    Strings can be indexed:
    word = 'Python'
    word[0] == 'P'
    word[-1] == 'n'
    word[-2] == 'o' # second-last character

    0 - 5 # positive indices
    -1 to -6 # negative indices

    >>> word[:2] # up to 2 (excluded)
    'Py'
    >>> word[2:] # from position 2
    'thon'
    
    >>> word[:4] # get first 4 characters
    'Pyth'
    >>> word[4:] # exclude first 4 characters
    'on'

     +---+---+---+---+---+---+
    | P | y | t | h | o | n |
    +---+---+---+---+---+---+
    0   1   2   3   4   5   6
    -6  -5  -4  -3  -2  -1

    Strings are immutable, create a new one if needed.
    ###
        >>> 'C' + word[1:]
        'Cython'
        >>> word[:1] + 'andas'
        'Pandas'
        >>> len(word)
        6
    ###

B. Lists
    Arrays = {1,2,3}
    Lists = [1,2,4]

    square = [1,2,3];
    square[0] == 1
    square[-1] == 3
    square[:2] = [1,2] # slicing can be applied
    #concatenation
    squares + [4,5,6] == [1,2,3,4,5,6]

    #list are mutable!
    squares[0] = 10 == [10,2,3,4,5,6]

    #add new items at end of list append()
    squares.append(7) == [10,2,3,4,5,6,7]

    ###
        >>> letter = ['a','b','c','d']
        >>> letter[1:3] = ['B','C']
        >>> letter
        ['a', 'B', 'C', 'd']
        >>> # remove 'B','C'
        >>> letter[1:3] = []
        >>> letter
        ['a', 'd']
        >>> # clear list
        >>> letter[:] = []
        >>> letter
        []
    ###
C: Programming
    ###
        # Fibonacci series
        >>> a,b = 0, 1 # multi assignment
        >>> while a < 10:
        ...     print(a)
        ...     a,b = b, a + b
        ... 
        0
        1
        1
        2
        3
        5
        8
    ###

    Like in C, any non-zero integer value is true; zero is false.

    print() inserts space between items:
        i = 45
        print('Value is', i)

    end keyword to avoid newline after output:
        a, b = 0, 1
        while a < 1000:
            print(a, end=',')
            a, b = b, a+b

