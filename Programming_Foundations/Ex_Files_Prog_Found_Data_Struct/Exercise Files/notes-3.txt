$ 3. Lists

    I. What are linked lists?
        Linear datastructure
            - elements not stored at contiguous locations
            - link elements using pointers
                - each link is a pointer, holds address to memory locations
                - doesn't have to be stored at contiguous locations in memory
                - data can be anywhere in memory, so we just need memory address
                     or the next pointer



            Analogy -> Train
            - each train car has a number of crates
            - store a chain to the next train car
            - the last train car has a null next pointer
            - can't jump from first train car to the last

            Node: (train car) contains data and a pointer

    II. Operations on linked lists
        - Add 
            - Easiest to insert at front or back of the list
            - Inserting at first: 
                - Set new node's next pointer to the first node
            - Inserting back of the list
                - Set next poitner to the new node
        - Access 
            - No index
            - Follow pointers until we found item we want to acces -> O(N)
        - Delete
            - Also need to follow pointers until we found the node were looking for 
            - then update the next pointer of the node preceding and following that node
        - Search
            - Same method to access linked list

        - Insert into
            - Follow pointers to that specific place
            - previous pointer points to new node and the new node's pointer points to the next node


        Many programming languages already have a list function ready to use, which lets programmers focus more on what 
        they want to build and less on maintaining linked list data structure

    III. Build a lined list in Java

    IV. Use linked list  in Java

    V. Singly vs. doubley linked lists
        Singly Linked Lists:
            - Only has next pointer
            - can only traverse forward
        Double Linked Lists:
            - next and previous pointer
            - just need to add a previous in node and tail in the linkedlist class

            Code:
                public class CustomLinkedList {
                    Node head;
                    Node tail;
                    
                    class Node {
                        int data;
                        Node next;
                        Node previous;

                        Node(int d) { data = d; }
                    }
                }

    VI. Lists in other langauges
        Java -> list not datatype
        Python -> is a datatype

        Java: 
            java.util. package
            - List inteface
                - ArrayList class
                    - A little both like list and an Array
                    - Has behavious of a list on surface
                    - Stored as an array under the hood  
                - LinkedList class
        C# has built-in linkedlist implementation

        Swift, Ruby, and JavaScript:
            - No built-in linked lists 
        Python:
            Python list are resizable array
            - Not built-in linkedlist implementation

        ! Most of the time, you need array structures rather than linkedlists

        

    VII. Pros and cons of lists
    Sort - Merge sort for LinkedList. 
         - quicksort and heapsort not ideal -> b/c slow random access performance 
            -> accessing items in linkedlist are sequential.
            -> random access, shuld be able to access item by index and get item at that slot immediatley (like and array)