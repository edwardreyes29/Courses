$ 2. Arrays

    I. What are arrays?
        - Array: a collection of elements, where each item is 
            identified by and index or a key
        
        - Datat Structure: a collection with a defined way of
            accessing and storing items

        - Use index to acces specific piece of Datat

        // Java 
        int[] lotteryNumbers = {0, 2, 18, 40, 14, 30};
        int first = lotterNumbers[0]

        # Python: No arrays, uses lists instead
        lotteryNumbers = [0, 2, 18, 40, 14, 30]
        second = lotteryNumbers[1]
    
        - Array: index out of bounds error
            Trying to access item outside limits

    II. Use arrays in Swift
    III. Multidimensional arrays
        - Can have containers within containers
        - Each rows have the same number of columns, unlike a jagged array

        E.x. Dinner
            Appetizers:     Salad       Soup        Cheese plate
            Main Courses:   Chicken     Salmon      Lasagna

            // Java
            String[][] dinnerChoices = {
                {"Salad", "Soup", "Cheese plate"},
                {"Chicken" , "Salmon", "Lasagna"}
            }

            // Locations
            Appetizers:   (0,0)   (0,1)   (0,2)
            Lasagna:      (1,0)   (1,1)   (1,2)



    IV. Multidimensional arrays in JavaScript
    * In JDOODLE, select NodeJS


    V. Jagged arrays
        - Jagged array can have elements of different dimensions and sizes

        // Regular multidimensional array
        [
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 9]
        ]

        // Jagged array
        // Each array in this data structure can be of different length
        [
            [1, 3, 8],
            [1, 2],
            [9, 0],
            [10, 11, 4, 20, 50],
            [30]
        ]

        * Acces the lenght of each individual array, since eachg
            array has different sizes


    VI. Jagged arrays in C#
    VII. Resizable arrays and language support
        Java, C++: Basic Arrays cannot be resized
            - Can only change values
            Java:
                - Immutable: basic array
                - Mutable: Java classes five us resizable versions
                - ArrayList: comes w/ extra functionality

                    * An arrayList is an array under the surface
                    * Focus less on maintaing data structures and
                        more on crating
                    E.x.
                        myArrayList.add(2,10); // inserts value 10 at index 2


        Ruby, JavaScript: Basic arrays can be resized

        Resizable/dynamic/mutable arrays
            - can change size of array


        Java Code:
            import java.util.ArrrayList;

            public class MyClass {
                public static void main(String args[]) {
                    ArrayList<Integer> myArrayList = new ArrayList<>();
                    for (int i = 0; i < 10; i++) {
                        myArrayList.add(i);
                    }
                    myArrayList.add(2, 10);
                    System.out.println(myArrayList);
                }
            }
            Original Array: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
            Output:         [0, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9]

        [Add, push] -> Adding to back of the array
        [Remove, pop] -> Removing from the back of the array

        Insert Funciontality in Non-mutable Arrays:
        Basic array is big enough: 
            * items are shuffled downa nd a new item is added
        Basic array is not big enough:
            * All contents copied into a new, bigger basic array,
                and new items are also copied over with it
            * Major performance reprucssions

    VIII. Search arrays

        input: object
        output: true/false value or index

        How to search:
            1. Check every item
            2. if match, return true (return index, ArrayList)
            3. if no match (after searching entire array) return false (return -1, ArrayList)

            linear search with a for loop (brute force)
            run-time increases with size of input


    IX. Sort arrays

        Sorting Arrays: Numerical
        Sorting Arrays: Alphabetical

        Call sort function or pass data structure as a parameter to a sorting function

        When working with objects, define a comparator to sort
        e.g. three persons, each with first name, last name, age

        Computationally expensive, need to do a lot of comparisions and checks.
        The number of comparisions depends on the sorting alg and how much info you have about your data

    X. Big O notation

        Big O notation: Notation used to describe the performance or complexity of an algorithm

            O(1) Time: Consisten duration of algorithm in same time (or space) regardless of size of input
                        - "Constant Time"
            O(N) Time:
            e.g.    
                - Access
                    - If we know items index -> O(1) time
                - Updated
                    - O(1) time
                - Inserted
                    - Insert index at end of array (large enough) -> O(1)
                    - If array is full and need to create new array -> O(N) linear time, also worst-case
                - Search
                    - Best case -> O(1) time
                    - Worst case (if item doesn't exist) -> O(N) time
                - Delete 
                    - Best case (if we have index of the item) -> O(1) time
                    - Worst case (if we do not know index, must search, and item is not in array) -> O(N) time
                - Sort: some have prereqs for data
                    - Insertion sort
                    - Merge sort
                    - Heap sort
                    - Bubble sort
                    - Bucket sort
                    - Radix sort