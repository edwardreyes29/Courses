I. Analysis of Algorithms

    Consider space complexity and time complexity of algorithms.

    Time complexity is the usual concern for this chapter.
    Depends on different machines and environments (temp in room).

    E.g. Shortest path, consider the number of steps.


II. How to calculate time complexity.

    [7, 9, 5, 12, 2] // 5 elements

    [...] // 11 elements


    >> How to measure time?
    Order of growth varies with the input data.

    e.g. 
        1. Say there are two algorithms for sorting.
        2. Both take 100 - 10 ms

        Q?. How does running time vary with input sizes?

        Items   | Alg 1 ms    | Alg 2 ms
        200       20          40
        1000      100         1000
        10000     1000        100000

        Alg 1: Linear growth of time
        Alg 2: Quadratic growth of time

III. The RAM model of computation:

    Types of Time Complexity:
    1. Worst Case (most considered)
    2. Best Case (bogus)
    3. Average Case (not concern)

    RAM: Assumptions
    1. We have infinite memory
    2. Each operation take 1 unit of time (*,+,-,/)
    3. For each memory access, unit time is consumed.
    4. Data may be accessed from RAM or disk, assumed data
        is in the RAM.
    
IV. Time complexity of bubble sort

Bubble sort

    {12, 8, 7, 5, 2} // 5 elements -> Worst case scenario

    comparison  |   swap
        1           3       {8, 12, 7, 5, 2}
        1           3       {8, 7, 12, 5, 2}
        1           3       {8, 7, 5, 12, 2}
        1           3       {8, 7, 5, 2, 12}

    FIRST PASS: 16 steps (1+1+1+1+3+3+3+3)
    SECOND PASS: 12 steps
    THIRD PASS: 8 steps
    FINAL PASS: 4 steps

    Worst case for 5 elements:
    16 + 12 + 8 + 4
    = 4 (4 + 3 + 2 + 1)
    = 4 (n-1 + n-2 + ... + 3 + 2 + 1)
    = 2 * n * (n-1)
    = pn^2 + qn + r // Quadratic

V. Pseudo code: Bubble sort algorithm

{2, 5, 7, 8, 12}

    for i = 0 to A.length - 2   // second last element
        for j = 0 to A.length - 2 - i
            if A[j] > A[j+1]
                tmp = A[j+1]
                A[j+1] = A[j]
                A[j] = tmp

    Quadratic:
    i=0     |    0 <= j < n-2   | (n-1)
    i=1     |    0 <= j < n-3   | (n-2)
    ...
    i = n-2 |   0 <= j < 0      | 1

VI. The Big O notation

    T(n) = pn^2 + qn + r   // quadratic function
    Find upperbound.

    Observation:
    For all n > n0,
    c2n^2 >= pn2 + qn + r 

    O(n^2) = { f(n) : there exist a positive constants c and n0 such that
    0 <= f(n) <= cn2 for all n >= n0}


    

